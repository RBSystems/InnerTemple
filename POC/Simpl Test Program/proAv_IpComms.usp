/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:		ProAv
System Name:		IP Comms
System Number:		
Programmer:			SPM
Comments:			This module will deal with IP comms to a specified IP address and port.
					It will monitor the connection and reconnect if it sees a dropped 
					connection.
					
Version:			v1-0: initial release
*/

/*******************************************************************************************
  Compiler Directives
*******************************************************************************************/

#DEFAULT_NONVOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE

#HELP_BEGIN
This module will deal with IP comms to a specified IP address and port. It will monitor 
the connection and reconnect if it sees a dropped connection. 

Inputs:
Tx$ - Information to the device  

Outputs:
Rx$ - Information from the device

Parameters:
IP Address - Ip address in a text based form
Port - Port number as an integer value
#HELP_END


/*******************************************************************************************
  Include Libraries
*******************************************************************************************/

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
*******************************************************************************************/
digital_input		_skip_, _skip_, _skip_, Debug, _skip_, Reconnect;
string_input		_skip_, _skip_, Tx$[1000];
                
digital_output		_skip_, _skip_, _skip_, CommsFb, _skip_;                
string_output		_skip_, _skip_, Status$, Rx$;  

/*******************************************************************************************
  Sockets
*******************************************************************************************/
volatile tcp_client client[1024]; 
 
/*******************************************************************************************
  Parameters
*******************************************************************************************/
string_parameter 	IPAddress[15];
integer_parameter   Port;
            
/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/
/*
#BEGIN_PARAMETER_PROPERTIES parameter_variable, parameter_variable, ...
   // propValidUnits = // unitString or unitDecimal|unitHex|unitPercent|unitCharacter|unitTime|unitTicks;
   // propDefaultUnit = // unitString, unitDecimal, unitHex, unitPercent, unitCharacter, unitTime or unitTicks;
   // propBounds = lower_bound , upper_bound;
   // propDefaultValue = ;  // or, propDefaultValue = "";
   // propList = // { "value" , "label" } , { "value" , "label" } , ... ;
   // propShortDescription = "status_bar_hint_text";
   // #BEGIN_PROP_FULL_DESCRIPTION  line_1...  line_2...  line_n  #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES
*/                      

#BEGIN_PARAMETER_PROPERTIES IPAddress
	propValidUnits =	unitString;
	propDefaultUnit = 	unitString;
#END_PARAMETER_PROPERTIES    

#BEGIN_PARAMETER_PROPERTIES Port
	propValidUnits =	unitDecimal;
	propDefaultUnit = 	unitDecimal;
#END_PARAMETER_PROPERTIES

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/         
       
/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/                                     
       
function clientConnect()
{  
	signed_integer status;

    status = SocketConnectClient(client, IPAddress, Port, 1);

    if(status < 0)	{if(debug)print("ERROR connecting socket to address %s on port %d\n", IPAddress, Port); 
    				Status$ = "Status: Disconnected";}
    else			if(debug)print("Connected socket to address %s on port %d\n", IPAddress, Port);
}

function clientDisconnect()
{
	signed_integer status;
		
    status = SocketDisconnectClient (client); 
    
    if(status < 0)	if(debug)print("ERROR disconnecting socket to address %s on port %d\n", IPAddress, Port); 
    else			if(debug)print("Disconnected socket to address %s on port %d\n", IPAddress, Port);    
}
          
/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
   
push Reconnect
{
	clientDisconnect();
	clientConnect();
}   
   
socketReceive client
{
	Rx$ = client.SocketRxBuf;
    ClearBuffer(client.SocketRxBuf);
}

change Tx$
{   
	signed_integer status;
	
	status = SocketSend(client, Tx$);                                                        
	
	if(status < 0)	if(debug)print("ERROR sending to address %s on port %d\n", IPAddress, Port);
	else			if(debug)print("String sent to address %s on port %d string %s\n", IPAddress, Port, Tx$);
}
 
socketConnect client
{
	CommsFb = 1;                   
	Status$ = "Status: Connected";
	if(debug)print("Socket Connected to %s on port  %d\n", IPAddress, Port);
} 

socketDisconnect client
{
	CommsFb = 0;
	Status$ = "Status: Disconnected"; 
	if(debug)print("Socket Disconnected to %s on port %d\n", IPAddress, Port);
}

  
/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{     
    WaitForInitializationComplete();
    Status$ = "Status: Disconnected"; 
	clientConnect();   
}


                             
                            